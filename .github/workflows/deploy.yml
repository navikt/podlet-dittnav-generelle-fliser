name: Build and deploy

on:
  push:
    branches:
      - main

env:
  IMAGE: docker.pkg.github.com/${{ github.repository }}/podlet-template:${{ github.sha }}
  LATEST_IMAGE: docker.pkg.github.com/${{ github.repository }}/podlet-template:latest
  BASE_PATH: /arbeid/podlet-template
  IMAGE_CACHE_RUNTIME: docker.pkg.github.com/${{ github.repository }}/podlet-template-build-cache-runtime
  IMAGE_CACHE_BUILDER: docker.pkg.github.com/${{ github.repository }}/podlet-template-build-cache-builder

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Test
        run: |
          npm install --no-save --no-audit
          npm test

  build:
    name: Build and Publish Docker image
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker pull ${{ env.IMAGE_CACHE_BUILDER }} || true
          docker pull ${{ env.IMAGE_CACHE_RUNTIME }} || true
          docker build . -t ${{ env.IMAGE }} -t ${{ env.LATEST_IMAGE }} \
            --cache-from=${{ env.IMAGE_CACHE_BUILDER }},${{ env.IMAGE_CACHE_RUNTIME }} \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg BASE_PATH=${{ env.BASE_PATH }} \
            --build-arg VERSION_HASH=${{ github.sha }}
          docker push ${{ env.IMAGE }}
          docker push ${{ env.LATEST_IMAGE }}
      - name: Archive NAIS yaml
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v1
        with:
          name: nais-yaml
          path: nais

  update-docker-cache:
    name: Update Docker Cache
    needs: [ build ]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker pull ${{ env.IMAGE_CACHE_BUILDER }} || true
          docker build . -t ${{ env.IMAGE_CACHE_BUILDER }} --target builder --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from=${{ env.IMAGE_CACHE_BUILDER }}
          docker push ${{ env.IMAGE_CACHE_BUILDER }}
          docker pull ${{ env.IMAGE_CACHE_RUNTIME }} || true
          docker build . -t ${{ env.IMAGE_CACHE_RUNTIME }} --target runtime --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from=${{ env.IMAGE_CACHE_RUNTIME }}
          docker push ${{ env.IMAGE_CACHE_RUNTIME }}
